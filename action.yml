name: 'Deploy ArgoCD'
description: 'Deploy on Kubernetes with ArgoCD'
author: hello@cloudposse.com
branding:
  icon: 'cpu'
  color: 'white'
inputs:
  cluster:
    description: Cluster name
    required: true
  aws-region:
    description: AWS region
    required: false
    default: us-east-1
  path:
    description: The path where lives the helmfile or helm chart.
    required: true
  toolchain:
    description: Toolchain ('helm', 'helmfile', 'helm-raw')
    required: false
    default: helmfile
  ssm-path:
    required: true
    description: SSM path to read environment secrets
  operation:
    description: Operation with helmfiles. (valid options - `deploy`, `destroy`)
    required: true
    default: deploy
  environment:
    description: Helmfile environment
    required: false
    default: preview
  gitref-sha:
    description: Git SHA
    required: false
    default: ''
  namespace:
    description: Kubernetes namespace
    required: true
  application:
    description: Application name
    required: true
  image:
    description: Docker image
    required: true
  image-tag:
    description: Docker image tag
    required: true
  debug:
    description: Debug mode
    default: 'false'
    required: false
  release_label_name:
    description: The name of the label used to describe the helm release
    default: "release"
    required: false
  github-pat:
    description: Github PAT to access argocd configuration repository
    required: true
outputs:
  webapp-url:
    description: "Web Application url"
    value: ${{ steps.result.outputs.webapp_url }}
  sha:
    description: "Git commit SHA into argocd repo"
    value: ${{ steps.git.outputs.sha }}
runs:
  using: "composite"
  steps:
    - name: 'Setup yq'
      uses: dcarbone/install-yq-action@v1.0.1
      with:
        version: v4.28.1
        download-compressed: true
        force: true

    - name: Setup helmfile
      uses: mamezou-tech/setup-helmfile@v1.2.0
      with:
        helmfile-version: v0.148.1
        helm-version: v3.10.2
        install-kubectl: false

    - id: destination
      uses: theowenyoung/git-url-parse@v1
      with:
        url: ${{ inputs.cluster }}

    - id: destination_dir
      shell: bash
      run: |-
        echo "name=$(echo $RANDOM | md5sum | head -c 20)" >> $GITHUB_OUTPUT

    - name: Checkout Argo Configuration
      uses: actions/checkout@v2
      with:
        repository: ${{ steps.destination.outputs.owner }}/${{ steps.destination.outputs.name }}
        ref: ${{ steps.destination.outputs.ref }}
        token: ${{ inputs.github-pat }}
        path: ${{ steps.destination_dir.outputs.name }}

    - name: AWS Get caller identity
      uses: docker://segment/chamber:2.11.0
      with:
        args: --verbose export ${{ inputs.ssm-path }}/${{ inputs.environment }} --format yaml --output-file ./platform.yaml

    - name: YQ Platform settings
      shell: bash
      run: |
        yq --exit-status --no-colors --inplace eval '{"platform": .}' ./platform.yaml

    - name: Helmfile render
      if: ${{ inputs.toolchain == 'helmfile' }}
      shell: bash
      run: |
        mkdir -p  ./${{ steps.destination_dir.outputs.name }}/${{ steps.destination.outputs.filepath }}
        helmfile --namespace ${{ inputs.namespace }} \
                --environment ${{ inputs.environment }} \
                --file ${{ inputs.path}} \
                --state-values-file $(pwd)/platform.yaml \
                template > \
         ./${{ steps.destination_dir.outputs.name }}/${{ steps.destination.outputs.filepath }}/${{ inputs.application }}.yaml
      env:
        IMAGE_NAME: ${{ inputs.image }}
        IMAGE_TAG: ${{ inputs.image-tag }}

    - name: Helm raw render
      if: ${{ inputs.toolchain == 'helm-raw' }}
      shell: bash
      run: |
        mkdir -p  ./${{ steps.destination_dir.outputs.name }}/${{ steps.destination.outputs.filepath }}
        helm template ${{ inputs.application }} ${{ inputs.path }} \
          --set image.repository=${{ inputs.image }} \
          --set image.tag=${{ inputs.image-tag }} \
          --create-namespace=true \
          --namespace ${{ inputs.namespace }} \
          --set ingress.default.hosts.example=test \
          --values $(pwd)/platform.yaml \
        > ./${{ steps.destination_dir.outputs.name }}/${{ steps.destination.outputs.filepath }}/${{ inputs.application }}.yaml
      env:
        IMAGE_NAME: ${{ inputs.image }}
        IMAGE_TAG: ${{ inputs.image-tag }}

    - name: Helm render
      if: ${{ inputs.toolchain == 'helm' }}
      uses: 1arp/create-a-file-action@0.2
      with:
        path: ${{ steps.destination_dir.outputs.name }}/${{ steps.destination.outputs.filepath }}
        file: ${{ inputs.application }}.yaml
        content: |-
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ inputs.application }}
            namespace: argocd
            annotations:
              outputs.platform.cloudposse.com/webapp-url: "<unknown endpoint>"
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            destination:
              namespace: ${{ inputs.namespace }}
              server: 'https://kubernetes.default.svc'
            project: default
            source:
              path: ${{ inputs.path }}
              repoURL: ${{ steps.destination.outputs.owner }}/${{ steps.destination.outputs.name }}
              targetRevision: ${{ inputs.gitref-sha }}
              helm:
                version: v3
                values: |
                    {{- toYaml .Values.values | nindent 8 }}
          parameters:
            - name: image.repository
              value: ${{ inputs.image }}
            - name: image.tag
              value: ${{ inputs.image-tag }}
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
            syncOptions:
              - CreateNamespace=true          

    - name: Get Webapp
      id: result
      shell: bash
      run: |-
        cat ./${{ steps.destination_dir.outputs.name }}/${{ steps.destination.outputs.filepath }}/${{ inputs.application }}.yaml    
        WEBAPP_URL=$( \
          yq eval-all '.metadata.annotations["outputs.platform.cloudposse.com/webapp-url"] | select(. != null)' \
            ./${{ steps.destination_dir.outputs.name }}/${{ steps.destination.outputs.filepath }}/${{ inputs.application }}.yaml \
        )
        echo "webapp_url=${WEBAPP_URL}" >> $GITHUB_OUTPUT

    - name: Push to Github
      uses: nick-fields/retry@v2
      id: git
      with:
        timeout_minutes: 1
        max_attempts: 4
        shell: bash
        command: |-
          git config --global user.email "bot@example.com"
          git config --global user.name "cloudpossebot"
          git config --global pull.rebase false
          git config --global pull.ff only
          
          cd ./${{ steps.destination_dir.outputs.name }}
          git pull
          git add -A
          git status
          git diff-index --quiet HEAD || git commit -m "GitHub Actions Autocommitter"
          git push origin ${{ steps.destination.outputs.ref }}
          
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
